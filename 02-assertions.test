#!/bin/bash

# This file tries to exercise the assertions

# TODO: test skipping
# test:no_assertions() {
#     echo "This test has no assertions"
# }

# make sure expected_error works before using to test the assertions
test:expected_error() {
    is_eq "apple" "orange"
    _expect_error "line nnn: is_eq expected 'apple', got 'orange'"
}

test:is_eq()
{
    is_eq "hello" "hello"
    is_eq "" ""
    is_eq "   " "   "

    is_eq 0 ""     # TODO: need to not depend on line #s here!
    _expect_error "line 12: is_eq expected '0', got ''"
    is_eq "10.0" 10
    _expect_error "line 14: is_eq expected '10.0', got '10'"
    # TODO: I wouldn't expect variable interpolation in this function
    # is_eq '$var_no_exist' ''      # ensure no interpolation
    # _expect_error "line 16: is_eq expected '$var_no_exist', got ''"
    # is_eq '' '$var_no_exist'      # in either argument
    # _expect_error "line 18: is_eq expected '', got '$var_no_exist'"
    is_eq " " "  "                # test whitespace
    _expect_error "line 21: is_eq expected ' ', got '  '"
}

test:file_is() {
    echo "123"$'\n'"456" > scratchfile
    file_is "123"$'\n'"456" scratchfile
    file_is "123"$'\n'"456" scratchfile  # ensure it can run again
}

test:file_is_not() {
    echo "aaa" > scratchfile
    file_is "bbb" scratchfile
    _expect_error "line nnn: file_is expected 'bbb', got 'aaa'"

    file_is "bbb" "missing-file"
    _expect_error "line nnn: file_is couldn't open 'missing-file'"

    file_is # no arguments
    _expect_error "line nnn: file_is couldn't open ''"
}

test:stdout_is() {
    echo "     "
    stdout_is "     "
}

test:stdout_is_not() {
    echo ""
    stdout_is " "
    _expect_error "line nnn: stdout_is expected ' ', got ''"
}

test:stderr_is() {
    echo '  $zzz $zzz  ' >&2
    stderr_is '  $zzz $zzz  '
}

test:stderr_is_not() {
    echo $'\n.\n' >&2

    # the test output has a trailing space... and editors often delete trailing spaces.
    # so, we'll represent the trailing space with '@'' and have sed fix it up after.
    stderr_is "true"
    _expect_error "$(cat <<EOF | sed 's/@/ /'
line nnn: stderr_is expected:
    | true
    but got:
    |@
    | .
EOF
    )"
}

# This test should show a stderr assertion
test:stderr_contains() {
    echo "testing stderr assertions" >&2
    stderr_contains "testing"
}

# TODO: test failing tests elsewhere
# This test makes an assertion but fails
# test:failing_test() {
#     return
#     is_eq "pass" "pass"   # This passes
#     is_eq "fail" "not-fail" # This fails

#     # This test should show 2 assertions and 1 error
# }

# TODO: mock isn't an assertion
# TODO: should it be an error if you mock something but don't use it?
test:mock_works()
{
    mock "testcmd" 'echo "mock command executed"'
    is_eq "mock command executed" "$(testcmd)"
}

source "$(dirname "$0")/test-harness"
